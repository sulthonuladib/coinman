// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: network.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNetwork = `-- name: CreateNetwork :one
INSERT INTO networks (code, name) VALUES ($1, $2) RETURNING id, code, name, created_at, updated_at
`

type CreateNetworkParams struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, createNetwork, arg.Code, arg.Name)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNetwork = `-- name: DeleteNetwork :one
DELETE FROM networks WHERE id = $1 RETURNING id, code, name, created_at, updated_at
`

func (q *Queries) DeleteNetwork(ctx context.Context, id int32) (Network, error) {
	row := q.db.QueryRow(ctx, deleteNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNetwork = `-- name: GetNetwork :one
SELECT id, code, name, created_at, updated_at FROM networks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNetwork(ctx context.Context, id int32) (Network, error) {
	row := q.db.QueryRow(ctx, getNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNetworks = `-- name: GetNetworks :many
SELECT
  id, code, name, created_at, updated_at
from networks
  LIMIT $2
  OFFSET $1
`

type GetNetworksParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetNetworks(ctx context.Context, arg GetNetworksParams) ([]Network, error) {
	rows, err := q.db.Query(ctx, getNetworks, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Network
	for rows.Next() {
		var i Network
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNetwork = `-- name: UpdateNetwork :one
UPDATE networks SET code = $1, name = $2 WHERE id = $3 RETURNING id, code, name, created_at, updated_at
`

type UpdateNetworkParams struct {
	Code string `json:"code"`
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateNetwork(ctx context.Context, arg UpdateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, updateNetwork, arg.Code, arg.Name, arg.ID)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
