// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: coin.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoin = `-- name: CreateCoin :one
INSERT INTO coins (symbol, name) VALUES ($1, $2) RETURNING id, symbol, name, created_at, updated_at
`

type CreateCoinParams struct {
	Symbol string `json:"symbol"`
	Name   string `json:"name"`
}

func (q *Queries) CreateCoin(ctx context.Context, arg CreateCoinParams) (Coin, error) {
	row := q.db.QueryRow(ctx, createCoin, arg.Symbol, arg.Name)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCoin = `-- name: DeleteCoin :one
DELETE FROM coins WHERE id = $1 RETURNING id, symbol, name, created_at, updated_at
`

func (q *Queries) DeleteCoin(ctx context.Context, id int32) (Coin, error) {
	row := q.db.QueryRow(ctx, deleteCoin, id)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoin = `-- name: GetCoin :one
SELECT id, symbol, name, created_at, updated_at FROM coins WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoin(ctx context.Context, id int32) (Coin, error) {
	row := q.db.QueryRow(ctx, getCoin, id)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoins = `-- name: GetCoins :many
SELECT id, symbol, name, created_at, updated_at FROM coins
    LIMIT $2
    OFFSET $1
`

type GetCoinsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetCoins(ctx context.Context, arg GetCoinsParams) ([]Coin, error) {
	rows, err := q.db.Query(ctx, getCoins, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coin
	for rows.Next() {
		var i Coin
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoin = `-- name: UpdateCoin :one
UPDATE coins SET symbol = $1, name = $2 WHERE id = $3 RETURNING id, symbol, name, created_at, updated_at
`

type UpdateCoinParams struct {
	Symbol string `json:"symbol"`
	Name   string `json:"name"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateCoin(ctx context.Context, arg UpdateCoinParams) (Coin, error) {
	row := q.db.QueryRow(ctx, updateCoin, arg.Symbol, arg.Name, arg.ID)
	var i Coin
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
