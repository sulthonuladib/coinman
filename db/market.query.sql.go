// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: market.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMarket = `-- name: CreateMarket :one
INSERT INTO markets (name, description) VALUES ($1, $2) RETURNING id, name, description, created_at, updated_at
`

type CreateMarketParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateMarket(ctx context.Context, arg CreateMarketParams) (Market, error) {
	row := q.db.QueryRow(ctx, createMarket, arg.Name, arg.Description)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMarket = `-- name: DeleteMarket :one
DELETE FROM markets WHERE id = $1 RETURNING id, name, description, created_at, updated_at
`

func (q *Queries) DeleteMarket(ctx context.Context, id int32) (Market, error) {
	row := q.db.QueryRow(ctx, deleteMarket, id)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMarket = `-- name: GetMarket :one
SELECT id, name, description, created_at, updated_at FROM markets WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMarket(ctx context.Context, id int32) (Market, error) {
	row := q.db.QueryRow(ctx, getMarket, id)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMarkets = `-- name: GetMarkets :many
SELECT
  id, name, description, created_at, updated_at
from markets
  LIMIT $2
  OFFSET $1
`

type GetMarketsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetMarkets(ctx context.Context, arg GetMarketsParams) ([]Market, error) {
	rows, err := q.db.Query(ctx, getMarkets, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Market
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarket = `-- name: UpdateMarket :one
UPDATE markets SET name = $1, description = $2 WHERE id = $3 RETURNING id, name, description, created_at, updated_at
`

type UpdateMarketParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateMarket(ctx context.Context, arg UpdateMarketParams) (Market, error) {
	row := q.db.QueryRow(ctx, updateMarket, arg.Name, arg.Description, arg.ID)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
